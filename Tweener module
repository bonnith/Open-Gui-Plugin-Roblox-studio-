--[[

		V0.1 OPEN GUI PLUGIN

this module is for GUI tweener plugin
its module that use for tween gui

 	use Play to open ui with tween
 	use Back to close ui with tween
 	
 	Ex.
 	
 	create an frame, open plugin click {create Start} to set startposition
 	and then click {Set end} to set last position,size,rotation at last
 	and use reset to move ui to start
 	
 	:::script:::
 	local gui_tweener = require(game.ReplicatedStorage.GuiTweener)
 	
	local frame = bla bla bla
	local button = bla bla bla
	
	--to open
	button.MouseButton1Click:Connect(function()
		local stage = gui_tweener.GetStage(frame)
		if stage == "Close" then
			gui_tweener.Play(frame)
		elseif stage == "Open" then
			gui_tweener.Back(frame)
		end
	end)
	
	-- or
	tweener.Toggle(frame,button,
	function() --- when open function
		
	end,
	function() --- when close function
		
	end)


]]

local GuiModule = {}

local tween = game:GetService("TweenService")
local default_duration = 0.5
local default_easingstyle = Enum.EasingStyle.Sine
local default_easingdirection = Enum.EasingDirection.Out
local default_repeatcount = 0
local default_reverse = false
local default_delaytime = 0
local mouse_enter_size = UDim2.new(0,10,0,10)

local function tweenobject(instance:GuiObject,to)
	local t = tween:Create(instance,TweenInfo.new(default_duration,default_easingstyle,default_easingdirection,default_repeatcount,default_reverse,default_delaytime),to)
	return t
end
local function convertstringudim(s:string)
	local bro = string.split(s,",");

	local xscale = tonumber(bro[1]) or 0;
	local xoffset = tonumber(bro[2]) or 0;
	local yscale = tonumber(bro[3]) or 0;
	local yoffset = tonumber(bro[4]) or 0;

	return UDim2.new(xscale,xoffset,yscale,yoffset)
end
local function convertudimtostring(udim:UDim2)
	local xscale = tostring(udim.X.Scale);
	local xoffset = tostring(udim.X.Offset);
	local yscale = tostring(udim.Y.Scale);
	local yoffset = tostring(udim.Y.Offset);
	return xscale..","..xoffset..","..yscale..","..yoffset
end
local function covert(s:string)

	local p_s_r = string.split(s,"/")

	local position = convertstringudim(p_s_r[1])
	local size = convertstringudim(p_s_r[2])
	local rotation = tonumber(p_s_r[3])

	return position,size,rotation
end
local function addp(folder,tweenname,value)
	local string_value = Instance.new("StringValue",folder)
	string_value.Name = tweenname
	string_value.Value = value
	return string_value
end
local function find(ins:GuiObject,valuename)
	local fold:Folder = ins:FindFirstChild("Tweener")
	if fold then
		local find:StringValue = fold:FindFirstChild(valuename)
		return fold,find
	end
end
local function set(ins:GuiObject,valuename,value)
	local fold,find = find(ins,valuename)
	if not fold then
		GuiModule.Create(ins)
	end
	if find and find:IsA("StringValue") then
		find.Value = value
	else
		addp(fold,valuename,value)
	end
end
function GuiModule.Create(instance:GuiObject)
	if not instance:FindFirstChild("Tweener") then
		local folder = Instance.new("Frame",instance)
		folder.Name = "Tweener"
		addp(folder,"FirstPosition",convertudimtostring(instance.Position).."/"..convertudimtostring(instance.Size).."/"..instance.Rotation)
		addp(folder,"Stage","Close")
	else
		set(instance,"FirstPosition",convertudimtostring(instance.Position).."/"..convertudimtostring(instance.Size).."/"..instance.Rotation)
		local fol,stage = find(instance,"Stage")
		stage.Value = "Close"
	end
	print("set "..instance.Name.." first position")
end
function GuiModule.Clear(instance:GuiObject)
	if instance:FindFirstChild("Tweener") then
		instance.Tweener:Destroy();
	end
end
function GuiModule.MoveTo(instance:GuiObject)
	set(instance,"Move",convertudimtostring(instance.Position).."/"..convertudimtostring(instance.Size).."/"..instance.Rotation)
	print("Set "..instance.Name.." last hit pos")
	local folder,find = find(instance,"FirstPosition")
	local p,s,r = covert(find.Value)
	instance.Position = p
	instance.Size = s
	instance.Rotation = r
end


function GuiModule.Play(instance:GuiObject)
	local folder,stage = find(instance,"Stage")
	local folder,find = find(instance,"Move")
	local p,s,r = covert(find.Value)
	local tt = tweenobject(instance,{Position = p,Size = s,Rotation = r})
	tt:Play()
	set(instance,"Stage","Open")
	stage.Changed:Once(function(v)
		if v ~= "Open" then tt:Pause() end
	end)
end
function GuiModule.Back(instance:GuiObject)
	local folder,stage = find(instance,"Stage")
	local folder,find = find(instance,"FirstPosition")
	local p,s,r = covert(find.Value)
	local tt = tweenobject(instance,{Position = p,Size = s,Rotation = r})
	tt:Play()
	set(instance,"Stage","Close")
	stage.Changed:Once(function(v)
		if v ~= "Close" then tt:Pause() end
	end)
end
function GuiModule.GetStage(instance:GuiObject)
	local folder,stage = find(instance,"Stage")
	if stage then
		return stage.Value
	end
end

function GuiModule.SetMouseEnter(instance:GuiObject)
	local first_size = instance.Size
	instance.MouseEnter:Connect(function()
		tweenobject(instance,{Size = first_size + mouse_enter_size}):Play()
	end)
	instance.MouseLeave:Connect(function()
		tweenobject(instance,{Size = first_size}):Play()
	end)
end
function GuiModule.ResetFrame(instance:GuiObject)
	local folder,find = find(instance,"FirstPosition")
	local p,s,r = covert(find.Value)
	instance.Position = p
	instance.Size = s
	instance.Rotation = r
	set(instance,"Stage","Close")
end
function GuiModule.Toggle(instance:GuiObject,button:GuiButton,enteredfunction,leavefunction)
	local connection = button.MouseButton1Click:Connect(function()
		local stage = GuiModule.GetStage(instance)
		if stage == "Close" then
			GuiModule.Play(instance)
			if enteredfunction then
				enteredfunction()
			end
		elseif stage == "Open" then
			GuiModule.Back(instance)
			if enteredfunction then
				leavefunction()
			end
		end
	end)
	return connection,button
end
return GuiModule
